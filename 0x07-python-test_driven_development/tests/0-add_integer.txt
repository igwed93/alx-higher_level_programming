# run test with ``python3 -m doctest -v ./tests/0-add_integer.txt``

===========================
HOW TO USE 0-add_integer.py
===========================

This module defines an integer addition function ``add_integer(a, b=98)``


First import method to test
===========================
>>> add_integer = __import__('0-add_integer').add_integer


Usage:
======
``add_integer(...)``` returns the addition of its two arguments. For numbers,
that value is equivalent to using the ``+`` operators.


SUCCESS CASES:
==============

Test signed and unsigned ints
::
	>>> print(add_integer(1, 2))
	3
	>>> print(add_integer(-2, 7))
	5
	>>> print(add_integer(-2, -2))
	-4
	>>> print(add_integer(3, -1))
	2

Test floating point values
::
	>>> print(add_integer(3.0, 2.8))
	5
	>>> print(add_integer(-3.5, 4.3))
	1

	Note that floats are casted to ints before the operation
::
	>>> print(add_integer(1.2, 2.4))
	3

Test use of default b=98 value
::
	>>> print(add_integer(1))
	99

FAIL CASES:
===========
Test string values
::
	>>> print(add_integer("python", 10))
	Traceback (most recent call last):
	...
	TypeError: a must be an integer
	>>> print(add_integer(10, "software"))
	Traceback (most recent call last):
	...
	TypeError: b must be an integer

Test no arguments
::
	>>> print(add_integer(None))
	Traceback (most recent call last):
	...
	TypeError: a must be an integer
	>>> print(add_integer(None, None))
	Traceback (most recent call last):
	...
	TypeError: a must be an integer

Test extra arguments
::
	>>> print(add_integer(2, 4, 5))
	Traceback (most recent call last):
	...
	TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

Test other data types
::
	>>> print(add_integer([2, 4], 9))
	Traceback (most recent call last):
	...
	TypeError: a must be an integer
	>>> print(add_integer(6, [2, 8, 4]))
	Traceback (most recent call last):
	...
	TypeError: b must be an integer

Test max/min numbers Python can handle ("inf" is infinity)
::
	>>> print(add_integer(float("inf")))
	Traceback (most recent call last):
	...
	OverflowError: cannot convert float infinity to integer
	>>> print(add_integer(float("-inf")))
	Traceback (most recent call last):
	...
	OverflowError: cannot convert float infinity to integer

Test special float NaN in Python (not a number)
::
	>>> print(add_integer(float("NaN")))
	Traceback (most recent call last):
	...
	ValueError: cannot convert float NaN to integer
